#include "../core/utilities.h"
#include "../toyJZB/initPtSpectrum.C"
#include "../core/autoRebin.h"

bool goFast(false);
unsigned long nToys = 100000000;
TRandom3 qTGenerator(122562123);

TH1F *qTSpectrum;
TH1F *jpTSpectrum;
TH1F *jzbPos;
TH1F *jzbNeg;

TF1 sigmaOverE("sigmaOverE", "sqrt(1.81/x + 0.15*0.15)",0, 500);
TF1 jres("jres","sqrt(1.81*x + 0.15*0.15*x*x)",0, 500);

TF1 *f1;



void toyJZB()
{
    cout << "jzb toys are starting, have fun" << endl;
    setTDRStyle();
    gStyle->SetOptTitle(0);
    initPtSpectrum(); // loads external pt spectrum from file

    if(goFast) {nToys = 10000; cout << "goFast with nToys = " << nToys << endl;}


    qTSpectrum  = new TH1F("qTSpectrum",";qT [GeV]; Events / GeV", 100, 0, 100);
    jpTSpectrum = new TH1F("jpTSpectrum",";jpT [GeV]; Events / GeV", 100, 0, 100);
    jzbPos      = new TH1F("jzbPos","JZB > 0;|JZB| [GeV]; Events / GeV", 100, 0, 100);
    jzbNeg      = new TH1F("jzbNeg","JZB < 0;|JZB| [GeV]; Events / GeV", 100, 0, 100);

    float xMin = 10;
    f1 = new TF1("f1","1.41883e+00*x**(-2.17592e+00)", xMin, 500);

//    h_ptSpectrum->Rebin(10);
    normHist(h_ptSpectrum);
    
    for(unsigned long entry = 0; entry < nToys; entry++)
    {
//	float qT    =  h_ptSpectrum->GetRandom(); xMin = 0.0;
	float qT    =  f1->GetRandom();
        float sigma = jres.Eval(qT);
        

        float jpT   = qTGenerator.Gaus(0.99*qT, sigma);
        if(jpT < xMin) jpT = xMin;
//        if(jpT < 5) jpT = qTGenerator.Exp(2);

        float jzb = jpT - qT;
        bool selEvent(true); 

//        if(jpT<30) selEvent=false;

        if(selEvent) 
        {
          qTSpectrum -> Fill(qT);
          jpTSpectrum->Fill(jpT);
          if(jzb > 0) jzbPos->Fill(fabs(jzb));
          if(jzb < 0) jzbNeg->Fill(fabs(jzb));
	}
    }

    TCanvas *c_sigmaOverE = new TCanvas("c_sigmaOverE","c_sigmaOverE");
    sigmaOverE.GetXaxis()->SetTitle("qT [GeV]"); 
    sigmaOverE.GetYaxis()->SetTitle("#sigma(qT)/qT"); 
    sigmaOverE.Draw();

    TCanvas *c_qTSpectrum = new TCanvas("c_qTSpectrum","c_qTSpectrum");
    c_qTSpectrum->SetLogy();
    qTSpectrum->Draw("hist");

    TCanvas *c_jpTSpectrum = new TCanvas("c_jpTSpectrum","c_jpTSpectrum");
    c_jpTSpectrum->SetLogy();
    jpTSpectrum->Draw("hist");

    TCanvas *c_jzb = new TCanvas("c_jzb","c_jzb");
    c_jzb->SetLogy();
    jzbPos->SetLineColor(kBlue);
    jzbNeg->SetLineColor(kRed);
    jzbPos->Draw("hist");
    jzbNeg->Draw("hist same");

    gStyle->SetErrorX(0.5);
 
    TCanvas *c_jzbRatio = new TCanvas("c_jzbRatio","c_jzbRatio");
    TH1F *jzbRatio = doRatio(jzbPos, jzbNeg, 100);
//    TH1F *jzbRatio = (TH1F*) jzbPos->Clone();
//    jzbRatio->Divide(jzbNeg);
    jzbRatio->SetLineColor(kBlack); 
    jzbRatio->GetYaxis()->SetRangeUser(0.6, 1.4);
    jzbRatio->Draw();

}

